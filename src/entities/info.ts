
// @JoinColumn()

/**
 *
 *  @JoinColumn() -  На той стороне, на которой вы устанавливаете @JoinColumn, таблица этой стороны
 *  будет содержать "идентификатор отношения" и внешние ключи к целевой таблице сущностей.
 *
 *  Пример:
 *
 *  @JoinColumn()
 *  photo: Photo;  ----> photoId (внешний ключ в таблицах)
 *
 * */



// @ManyToOne - @OneToMany

/**
 * Вы можете опустить @JoinColumn в @ManyToOne/ @OneToMany отношении. @OneToMany не может существовать без @ManyToOne.
 * Если вы хотите использовать @OneToMany, @ManyToOne является обязательным.
 * Однако обратное не является обязательным: если вас интересует только отношение @ManyToOne,
 * вы можете определить его без указания @OneToMany связанной сущности.
 * Где вы устанавливаете @ManyToOne- его связанная сущность будет иметь "идентификатор отношения" и внешний ключ.
 * */

/**
 * Ошибка «No metadata for „User“ was found» в NestJS может возникать по разным причинам:

 1. Отсутствие декоратора @Entity в определении класса. TypeORM полагается на этот декоратор для распознавания
    и обработки класса как сущности.

 2. Неправильный импорт класса сущности в модуле, где настроен TypeORM. Нужно убедиться, что класс
    сущности правильно импортирован и включён в массив entities конфигурации TypeOrmModule.

 3. Устаревшие файлы в папке dist. NestJS компилирует код TypeScript в JavaScript и хранит его в этой папке.
    Если код меняется, а файлы в dist-папке не обновляются, это может вызывать проблемы с несоответствием метаданных.
    В таком случае можно попробовать удалить dist-папку и перезапустить сервер.

 * */